@model Blog.Data.Models.ViewModels.Review.ReviewViewModel

@{
    Layout = "_Layout";
    ViewData["Title"] = Model.Title; // Set the title of the page
}

<style>
    .article-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .article-title {
        font-size: 28px;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .article-description {
        font-size: 18px;
        margin-bottom: 20px;
    }

    .article-image {
        max-width: 100%;
        height: auto;
        margin-bottom: 20px;
    }

    .article-metadata {
        font-size: 14px;
        color: #666;
        margin-bottom: 20px;
    }

    .vote-buttons {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .up-vote-button,
    .down-vote-button {
        font-size: 20px;
        color: #007bff;
        background-color: transparent;
        border: none;
        cursor: pointer;
        margin-right: 10px;
    }

    .favorite-button {
        font-size: 16px;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .remove-favorite {
        background-color: #dc3545;
        color: #fff;
    }

    .add-favorite {
        background-color: #28a745;
        color: #fff;
    }

    .article-content {
        font-size: 16px;
        line-height: 1.6;
        margin-bottom: 20px;
    }

    .related-video {
        margin-bottom: 20px;
    }

    .external-link {
        margin-bottom: 20px;
    }

        .external-link a {
            text-decoration: none;
            color: #007bff;
        }

    .badge-primary-custom {
        background-color: #007bff;
        color: #fff;
    }

    .badge-success-custom {
        background-color: #28a745;
        color: #fff;
    }

    .badge-warning-custom {
        background-color: orangered;
        color: #fff;
    }

    .badge-danger-custom {
        background-color: mediumvioletred;
        color: #fff;
    }
</style>

<div class="article-container">
    <div class="article-title">
        @Model.Title
        <div class="article-metadata">
            @if (Model.TopPick)
            {
                <span class="badge badge-warning-custom">Top Pick</span>
            }

            @if (Model.SpecialOffer)
            {
                <span class="badge badge-danger-custom">Special Offer</span>
            }

        </div>
    </div>

    <div class="article-description">
        @Model.Description
    </div>

    <div class="article-image">
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img src="@Model.ImageUrl" alt="Review Image" class="article-image" />
        }

        <div class="article-metadata">
            <p><em>@Model.CreationDate</em></p>
        </div>
    </div>

    <div class="article-metadata">
        <p>
            <button class="btn btn-sm btn-outline-success" id="upVoteButton" data-votetype="up">
                <i class="fas fa-thumbs-up"></i>
            </button>
            <span id="upVotes" style="color: grey;">@Model.UpVotes</span>
            <button class="btn btn-sm btn-outline-danger" id="downVoteButton" data-votetype="down">
                <i class="fas fa-thumbs-down"></i>
            </button>
            <span id="downVotes" style="color: grey;">@Model.DownVotes</span>
        </p>
        <p>
            <strong>Field:</strong>
            <vc:assigned-tags review-id=@Model.Id></vc:assigned-tags>
        </p>
        <p>
            <strong>Pricing:</strong>
            @foreach (var strategy in Model.PricingStrategies)
            {
                <span class="badge badge-success-custom">@strategy</span>
            }
        </p>

        @if (Model.IsFavorite)
        {
            <button class="btn btn-sm btn-danger toggle-favorite" data-action="remove" data-id="@Model.Id">Remove Favorite</button>
        }
        else
        {
            <button class="btn btn-sm btn-success toggle-favorite" data-action="add" data-id="@Model.Id">Add Favorite</button>
        }

    </div>

    <div class="article-content">
        @Model.Content
    </div>

    @if (!string.IsNullOrEmpty(Model.VideoUrl))
    {
        <div class="related-video">
            <h3>Related Video</h3>
            <div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="@Model.VideoUrl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Model.ExternalArticleUrl))
    {
        <div class="external-link">
            <h3>External Review Link</h3>
            <p><a href="@Model.ExternalArticleUrl" target="_blank">Read more <i class="fas fa-external-link-alt"></i></a></p>
        </div>
    }
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Initialize the current vote to none
        let currentVote = null;

        $('#upVoteButton, #downVoteButton').on('click', function () {
            const voteType = $(this).data('votetype');
            if (currentVote === voteType) {
                $.ajax({
                    type: 'GET',
                    url: `/Users/${voteType}Vote/@Model.Id`,
                    success: function (response) {
                        if (response.success) {
                            updateVoteCount(voteType, response);

                            // Add and remove the appropriate button styles
                            if (voteType === 'up') {
                                $('#upVoteButton').removeClass('btn-success').addClass('btn-outline-success');
                            } else {
                                $('#downVoteButton').removeClass('btn-danger').addClass('btn-outline-danger');
                            }
                        } else {
                            alert('Voting failed.');
                        }
                        // Re-enable both vote buttons
                        $('#upVoteButton, #downVoteButton').prop('disabled', false);
                    },
                    error: function () {
                        alert('An error occurred.');
                        // Re-enable both vote buttons
                        $('#upVoteButton, #downVoteButton').prop('disabled', false);
                    }
                });
                return;
            }
            castVote(voteType, this);
        });

        function castVote(voteType, buttonElement) {
            // Disable both vote buttons during the AJAX request
            $('#upVoteButton, #downVoteButton').prop('disabled', true);

            $.ajax({
                type: 'GET',
                url: `/Users/${voteType}Vote/@Model.Id`,
                success: function (response) {
                    if (response.success) {
                        updateVoteCount(voteType, response);

                        // Add and remove the appropriate button styles
                        if (voteType === 'up') {
                            $('#upVoteButton').removeClass('btn-outline-success').addClass('btn-success');
                            $('#downVoteButton').removeClass('btn-danger').addClass('btn-outline-danger');
                        } else {
                            $('#upVoteButton').removeClass('btn-success').addClass('btn-outline-success');
                            $('#downVoteButton').removeClass('btn-outline-danger').addClass('btn-danger');
                        }
                    } else {
                        alert('Voting failed.');
                    }
                    // Re-enable both vote buttons
                    $('#upVoteButton, #downVoteButton').prop('disabled', false);
                },
                error: function () {
                    alert('You are not logged in!');
                    // Re-enable both vote buttons
                    $('#upVoteButton, #downVoteButton').prop('disabled', false);
                }
            });
        }

        function updateVoteCount(voteType, response) {
            // Update the UI to reflect the current vote count
            const voteCountElement = voteType === 'up' ? $('#upVotes') : $('#downVotes');
            const otherVoteType = voteType === 'up' ? 'down' : 'up';
            const otherVoteCountElement = voteType === 'up' ? $('#downVotes') : $('#upVotes');

            // Unselect the other vote option
            currentVote = voteType;

            voteCountElement.text(response[voteType + 'Votes']);
            otherVoteCountElement.text(response[otherVoteType + 'Votes']);
        }
    });

    $(document).ready(function () {
        $('.toggle-favorite').on('click', function () {
            const action = $(this).data('action');
            const reviewId = $(this).data('id');
            const token = $('input[name="__RequestVerificationToken"]').val();
            const button = $(this); // Store the button element in a variable

            $.ajax({
                type: "POST",
                url: `/Users/${action === 'add' ? 'Add-Favorite' : 'Remove-Favorite'}/${reviewId}`,
                headers: {
                    RequestVerificationToken: token
                },
                success: function (data) {
                    if (action === 'add') {
                        console.log("Successfully added to favorites.");
                        // Update the button and toggle the action
                        button.data('action', 'remove').text('Remove Favorite').removeClass('btn-success').addClass('btn-danger');
                    } else {
                        console.log("Successfully removed from favorites.");
                        // Update the button and toggle the action
                        button.data('action', 'add').text('Add Favorite').removeClass('btn-danger').addClass('btn-success');
                    }

                    // Update the IsFavorite value from the response data
                    if (data.IsFavorite) {
                        button.addClass('btn-danger');
                    } else {
                        button.addClass('btn-success');
                    }
                },
                error: function () {
                    alert('You are not logged in!');
                }
            });
        });
    });
</script>